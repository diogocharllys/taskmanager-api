generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  teams     TeamUser[]
  assignedTasks Card[] @relation("AssignedTasks")
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        String     @id @default(uuid())
  name      String
  users     TeamUser[]
  projects  Project[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model TeamUser {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  team    Team     @relation(fields: [teamId], references: [id])
  teamId  String
  role    String   // Ex: admin, member

  @@unique([userId, teamId])
}

model Project {
  id        String   @id @default(uuid())
  name      String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  boards    Board[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Board {
  id        String   @id @default(uuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  lists     List[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id        String   @id @default(uuid())
  title     String
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id        String   @id @default(uuid())
  title     String
  description String?
  list      List     @relation(fields: [listId], references: [id])
  listId    String
  assignedTo User?   @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  comments  Comment[]
  histories History[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model History {
  id        String   @id @default(uuid())
  action    String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  timestamp DateTime @default(now())
}
